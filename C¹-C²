c¬π:
import tkinter as tk
from tkinter import ttk, font, filedialog, messagebox, scrolledtext
import pyperclip
from PIL import Image, ImageTk
import os
import webbrowser
import threading
import time
import json
from pathlib import Path

# Cores modernas com tema escuro
DARK_BG = "#1e1e2e"
DARKER_BG = "#181825"
ACCENT_COLOR = "#cba6f7"  # Roxo claro para destaque
TEXT_COLOR = "#cdd6f4"
SECONDARY_TEXT = "#a6adc8"
SUCCESS_COLOR = "#a6e3a1"
BUTTON_HOVER = "#313244"
WARNING_COLOR = "#f9e2af"
ERROR_COLOR = "#f38ba8"

# Constantes para os caminhos
USER_HOME = str(Path.home())
APP_DIR = os.path.join(USER_HOME, "script_hub")
WORKSPACE_DIR = os.path.join(APP_DIR, "WorkSpace")
PICTURES_DIR = os.path.join(APP_DIR, "WorkPictures")
DATA_FILE = os.path.join(APP_DIR, "games_data.json")

class OriginHub:
    def __init__(self, root):
        self.root = root
        self.root.title("Origins Hub")
        self.root.geometry("550x650")  # Tamanho maior para acomodar melhor os elementos
        self.root.configure(bg=DARK_BG)
        self.root.resizable(False, False)
        
        # Garantir que a estrutura de diret√≥rios exista
        self.setup_directories()
        
        # Carregar dados dos jogos/scripts
        self.load_games_data()
        
        # Aplicar tema personalizado
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Bot√£o principal
        self.style.configure('TButton', 
                            background=DARK_BG, 
                            foreground=TEXT_COLOR, 
                            borderwidth=0,
                            focuscolor=DARK_BG,
                            lightcolor=DARK_BG,
                            darkcolor=DARK_BG,
                            bordercolor=DARK_BG,
                            font=('Segoe UI', 10))
        
        self.style.map('TButton', 
                      background=[('active', BUTTON_HOVER)],
                      foreground=[('active', ACCENT_COLOR)])
        
        # Configurar fontes
        self.header_font = ('Segoe UI', 16, 'bold')
        self.subheader_font = ('Segoe UI', 12, 'bold')
        self.normal_font = ('Segoe UI', 10)
        
        # Criar interface
        self.create_widgets()
        
    def setup_directories(self):
        """Cria a estrutura de diret√≥rios necess√°ria se n√£o existir"""
        try:
            # Criar diret√≥rios
            os.makedirs(APP_DIR, exist_ok=True)
            os.makedirs(WORKSPACE_DIR, exist_ok=True)
            os.makedirs(PICTURES_DIR, exist_ok=True)
            
            # Verificar se o arquivo de dados existe, se n√£o, criar um vazio
            if not os.path.exists(DATA_FILE):
                with open(DATA_FILE, 'w') as f:
                    json.dump({}, f)
                    
            # Testar se o arquivo √© um JSON v√°lido
            try:
                with open(DATA_FILE, 'r') as f:
                    json.load(f)
            except json.JSONDecodeError:
                # Se o arquivo estiver corrompido, criar um novo
                with open(DATA_FILE, 'w') as f:
                    json.dump({}, f)
                    
            return True
        except Exception as e:
            messagebox.showerror("Erro", f"N√£o foi poss√≠vel criar os diret√≥rios necess√°rios: {str(e)}")
            return False
            
    def load_games_data(self):
        """Carrega os dados dos jogos e scripts do arquivo JSON"""
        try:
            with open(DATA_FILE, 'r') as f:
                data = json.load(f)
                self.scripts = data if data else {}
        except (FileNotFoundError, json.JSONDecodeError):
            # Se o arquivo n√£o existir ou estiver corrompido, iniciar com um dicion√°rio vazio
            self.scripts = {}
            self.save_games_data()  # Criar o arquivo
            
    def save_games_data(self):
        """Salva os dados dos jogos e scripts no arquivo JSON"""
        try:
            with open(DATA_FILE, 'w') as f:
                json.dump(self.scripts, f, indent=4)
            return True
        except Exception as e:
            messagebox.showerror("Erro", f"N√£o foi poss√≠vel salvar os dados: {str(e)}")
            return False
            
    def create_widgets(self):
        # Criar header com logo
        self.header_frame = tk.Frame(self.root, bg=DARKER_BG, height=80)
        self.header_frame.pack(fill=tk.X, pady=0)
        
        # Logo e t√≠tulo
        self.logo_label = tk.Label(self.header_frame, text="üéÆ", font=('Segoe UI', 24), bg=DARKER_BG, fg=ACCENT_COLOR)
        self.logo_label.pack(side=tk.LEFT, padx=15)
        
        self.title_label = tk.Label(self.header_frame, text="Origins Hub", font=self.header_font, bg=DARKER_BG, fg=TEXT_COLOR)
        self.title_label.pack(side=tk.LEFT, padx=5)
        
        # Separador
        separator = ttk.Separator(self.root, orient='horizontal')
        separator.pack(fill=tk.X, pady=0)
        
        # Frame principal
        self.main_frame = tk.Frame(self.root, bg=DARK_BG)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Header frame com t√≠tulo e data/hora
        self.header_content = tk.Frame(self.main_frame, bg=DARK_BG)
        self.header_content.pack(fill=tk.X, pady=10)
        
        # Header din√¢mico (√† esquerda)
        self.header = tk.Label(self.header_content, text="", font=self.subheader_font, bg=DARK_BG, fg=TEXT_COLOR)
        self.header.pack(side=tk.LEFT, anchor='w')
        
        # Data e hora (√† direita)
        self.datetime_label = tk.Label(self.header_content, text="", font=self.normal_font, bg=DARK_BG, fg=SECONDARY_TEXT)
        self.datetime_label.pack(side=tk.RIGHT, anchor='e')
        self.update_datetime()
        
        # Container para conte√∫do
        self.content_frame = tk.Frame(self.main_frame, bg=DARK_BG)
        self.content_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Status bar
        self.status_frame = tk.Frame(self.root, bg=DARKER_BG, height=30)
        self.status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        
        self.status_label = tk.Label(self.status_frame, text="Pronto", bg=DARKER_BG, fg=SECONDARY_TEXT, font=('Segoe UI', 9))
        self.status_label.pack(pady=5)
        
        # Iniciar na tela de jogos
        self.mostrar_jogos()
        
    def limpar_tela(self):
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
    def mostrar_jogos(self):
        self.limpar_tela()
        self.header.config(text="Selecione o jogo")
        
        # Container para cards e bot√£o de adi√ß√£o
        main_container = tk.Frame(self.content_frame, bg=DARK_BG)
        main_container.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Bot√£o para adicionar novo jogo
        add_game_btn = tk.Button(main_container, text="‚ûï Adicionar Novo Jogo", bg=DARKER_BG, fg=TEXT_COLOR,
                              font=self.normal_font, bd=0, padx=15, pady=8,
                              highlightthickness=1, highlightbackground=SUCCESS_COLOR, relief="ridge",
                              activebackground=BUTTON_HOVER, activeforeground=SUCCESS_COLOR,
                              command=self.adicionar_jogo)
        add_game_btn.pack(pady=(0, 15), anchor=tk.W)
        
        # Efeito hover para o bot√£o de adicionar
        add_game_btn.bind("<Enter>", lambda e, b=add_game_btn: b.config(fg=SUCCESS_COLOR))
        add_game_btn.bind("<Leave>", lambda e, b=add_game_btn: b.config(fg=TEXT_COLOR))
        
        # Container para cards
        games_container = tk.Frame(main_container, bg=DARK_BG)
        games_container.pack(fill=tk.BOTH, expand=True)
        
        # Verificar se h√° jogos para exibir
        if not self.scripts:
            # Mensagem quando n√£o h√° jogos
            empty_label = tk.Label(games_container, text="Nenhum jogo adicionado.\nClique em '‚ûï Adicionar Novo Jogo' para come√ßar.",
                                font=self.normal_font, bg=DARK_BG, fg=SECONDARY_TEXT, justify=tk.CENTER)
            empty_label.pack(expand=True, pady=50)
            return
            
        # Criar um card para cada jogo
        row, col = 0, 0
        for i, nome_jogo in enumerate(self.scripts):
            # Frame para o card com bordas arredondadas
            card = tk.Frame(games_container, bg=DARKER_BG, width=230, height=120, padx=5, pady=5,
                          highlightbackground=ACCENT_COLOR, highlightthickness=1, bd=0)
            card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
            card.pack_propagate(False)  # Manter tamanho fixo
            
            # T√≠tulo do card
            tk.Label(card, text=nome_jogo, font=self.subheader_font, bg=DARKER_BG, fg=ACCENT_COLOR).pack(pady=5)
            
            # Contar scripts
            script_count = len(self.scripts[nome_jogo])
            # N√£o contar campo _info como script
            if "_info" in self.scripts[nome_jogo]:
                script_count -= 1
            tk.Label(card, text=f"{script_count} scripts dispon√≠veis", font=self.normal_font, bg=DARKER_BG, fg=SECONDARY_TEXT).pack(pady=2)
            
            # Bot√£o de acesso com bordas arredondadas
            btn = tk.Button(card, text="Acessar Scripts", bg=DARKER_BG, fg=TEXT_COLOR,
                          font=self.normal_font, bd=0, highlightthickness=1, highlightbackground=ACCENT_COLOR,
                          activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR, relief="ridge",
                          borderwidth=1, padx=10, pady=5,
                          command=lambda j=nome_jogo: self.mostrar_scripts(j))
            btn.pack(pady=10)
            
            # Efeito hover
            btn.bind("<Enter>", lambda e, b=btn: b.config(fg=ACCENT_COLOR))
            btn.bind("<Leave>", lambda e, b=btn: b.config(fg=TEXT_COLOR))
            
            # Ajustar grid
            col += 1
            if col > 1:  # 2 cards por linha
                col = 0
                row += 1
                
        # Configurar grid para expans√£o
        for i in range(2):
            games_container.grid_columnconfigure(i, weight=1)
            
    def adicionar_jogo(self):
        """Abre uma janela para adicionar um novo jogo"""
        # Criar janela de di√°logo
        dialog = tk.Toplevel(self.root)
        dialog.title("Adicionar Novo Jogo")
        dialog.geometry("400x300")
        dialog.configure(bg=DARK_BG)
        dialog.resizable(False, False)
        dialog.transient(self.root)  # Torna modal
        dialog.grab_set()  # Bloqueia a janela principal
        
        # Centralizar a janela
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Container principal
        main_frame = tk.Frame(dialog, bg=DARK_BG, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        tk.Label(main_frame, text="Adicionar Novo Jogo", font=self.subheader_font, bg=DARK_BG, fg=TEXT_COLOR).pack(pady=(0, 15))
        
        # Campo de nome do jogo
        tk.Label(main_frame, text="Nome do Jogo:", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        nome_entry = tk.Entry(main_frame, font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR, insertbackground=TEXT_COLOR,
                           highlightthickness=1, highlightbackground=ACCENT_COLOR, bd=0)
        nome_entry.pack(fill=tk.X, pady=(0, 10))
        nome_entry.focus_set()  # Focar no campo de entrada
        
        # Vari√°vel para armazenar o caminho da imagem selecionada
        imagem_path = tk.StringVar()
        
        # Frame para selecionar imagem
        img_frame = tk.Frame(main_frame, bg=DARK_BG)
        img_frame.pack(fill=tk.X, pady=10)
        
        tk.Label(img_frame, text="Imagem do Jogo (opcional):", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(5, 5))
        
        # Label para exibir o caminho da imagem selecionada
        img_path_label = tk.Label(img_frame, text="Nenhuma imagem selecionada", font=self.normal_font, bg=DARK_BG, fg=SECONDARY_TEXT, wraplength=350)
        img_path_label.pack(fill=tk.X, pady=(0, 5))
        
        # Bot√£o para selecionar imagem
        def selecionar_imagem():
            file_path = filedialog.askopenfilename(
                title="Selecionar imagem",
                initialdir=PICTURES_DIR,
                filetypes=[("Imagens", "*.png *.jpg *.jpeg *.gif *.bmp")]
            )
            if file_path:
                # Verificar se o arquivo est√° no diret√≥rio esperado
                if os.path.dirname(file_path) != PICTURES_DIR:
                    messagebox.showwarning("Aviso", f"Por favor, selecione uma imagem da pasta {PICTURES_DIR}")
                    return
                    
                imagem_path.set(os.path.basename(file_path))  # Guardar apenas o nome do arquivo
                img_path_label.config(text=os.path.basename(file_path))
        
        select_img_btn = tk.Button(img_frame, text="Escolher Imagem", bg=DARKER_BG, fg=TEXT_COLOR,
                                font=self.normal_font, bd=0, padx=10, pady=5,
                                highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                                activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                                command=selecionar_imagem)
        select_img_btn.pack(anchor=tk.W)
        
        # Efeito hover
        select_img_btn.bind("<Enter>", lambda e, b=select_img_btn: b.config(fg=ACCENT_COLOR))
        select_img_btn.bind("<Leave>", lambda e, b=select_img_btn: b.config(fg=TEXT_COLOR))
        
        # Frame para bot√µes de a√ß√£o
        btn_frame = tk.Frame(main_frame, bg=DARK_BG)
        btn_frame.pack(fill=tk.X, pady=(20, 0), side=tk.BOTTOM)
        
        # Fun√ß√£o para salvar o novo jogo
        def salvar_jogo():
            nome = nome_entry.get().strip()
            
            # Validar nome
            if not nome:
                messagebox.showerror("Erro", "O nome do jogo √© obrigat√≥rio.")
                return
                
            # Verificar se o jogo j√° existe
            if nome in self.scripts:
                messagebox.showerror("Erro", f"O jogo '{nome}' j√° existe.")
                return
                
            # Criar entrada para o novo jogo
            self.scripts[nome] = {}
            
            # Adicionar caminho da imagem se selecionada
            if imagem_path.get():
                # Aqui podemos adicionar um campo para a imagem nos dados do jogo
                # Por exemplo, podemos criar um campo especial "_info" para metadados
                if "_info" not in self.scripts[nome]:
                    self.scripts[nome]["_info"] = {}
                self.scripts[nome]["_info"]["image"] = imagem_path.get()
            
            # Salvar dados
            if self.save_games_data():
                messagebox.showinfo("Sucesso", f"Jogo '{nome}' adicionado com sucesso!")
                dialog.destroy()
                # Atualizar a tela de jogos
                self.mostrar_jogos()
        
        # Bot√£o cancelar
        cancel_btn = tk.Button(btn_frame, text="Cancelar", bg=DARKER_BG, fg=TEXT_COLOR,
                            font=self.normal_font, bd=0, padx=15, pady=8,
                            highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                            activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                            command=dialog.destroy)
        cancel_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Efeito hover
        cancel_btn.bind("<Enter>", lambda e, b=cancel_btn: b.config(fg=ACCENT_COLOR))
        cancel_btn.bind("<Leave>", lambda e, b=cancel_btn: b.config(fg=TEXT_COLOR))
        
        # Bot√£o salvar
        save_btn = tk.Button(btn_frame, text="Salvar", bg=DARKER_BG, fg=SUCCESS_COLOR,
                          font=self.normal_font, bd=0, padx=20, pady=8,
                          highlightthickness=1, highlightbackground=SUCCESS_COLOR, relief="ridge",
                          activebackground=BUTTON_HOVER, activeforeground=SUCCESS_COLOR,
                          command=salvar_jogo)
        save_btn.pack(side=tk.RIGHT)
        
        # Efeito hover
        save_btn.bind("<Enter>", lambda e, b=save_btn: b.config(bg=BUTTON_HOVER))
        save_btn.bind("<Leave>", lambda e, b=save_btn: b.config(bg=DARKER_BG))
        
        # Liga√ß√£o para tecla Enter
        dialog.bind("<Return>", lambda event: salvar_jogo())
        
        # Esperando que o di√°logo seja fechado
        dialog.wait_window()

    def mostrar_scripts(self, jogo):
        self.limpar_tela()
        self.header.config(text=f"Scripts de {jogo}")
        
        # Container para scripts e bot√£o de adi√ß√£o
        main_container = tk.Frame(self.content_frame, bg=DARK_BG)
        main_container.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Bot√£o para adicionar novo script
        add_script_btn = tk.Button(main_container, text="‚ûï Adicionar Script", bg=DARKER_BG, fg=TEXT_COLOR,
                                font=self.normal_font, bd=0, padx=15, pady=8,
                                highlightthickness=1, highlightbackground=SUCCESS_COLOR, relief="ridge",
                                activebackground=BUTTON_HOVER, activeforeground=SUCCESS_COLOR,
                                command=lambda: self.adicionar_script(jogo))
        add_script_btn.pack(pady=(0, 15), anchor=tk.W)
        
        # Efeito hover para o bot√£o de adicionar
        add_script_btn.bind("<Enter>", lambda e, b=add_script_btn: b.config(fg=SUCCESS_COLOR))
        add_script_btn.bind("<Leave>", lambda e, b=add_script_btn: b.config(fg=TEXT_COLOR))
        
        # Container para scripts com scroll
        scripts_canvas = tk.Canvas(main_container, bg=DARK_BG, highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_container, orient="vertical", command=scripts_canvas.yview)
        scrollable_frame = tk.Frame(scripts_canvas, bg=DARK_BG)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: scripts_canvas.configure(scrollregion=scripts_canvas.bbox("all"))
        )
        
        scripts_canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        scripts_canvas.configure(yscrollcommand=scrollbar.set)
        
        scripts_canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Verificar se h√° scripts para exibir (excluindo o campo _info)
        script_names = [name for name in self.scripts[jogo] if name != "_info"]
        
        if not script_names:
            # Mensagem quando n√£o h√° scripts
            empty_label = tk.Label(scrollable_frame, text=f"Nenhum script adicionado para {jogo}.\nClique em '‚ûï Adicionar Script' para come√ßar.",
                                font=self.normal_font, bg=DARK_BG, fg=SECONDARY_TEXT, justify=tk.CENTER)
            empty_label.pack(expand=True, pady=50)
        else:
            # Adicionar scripts
            for script_nome in script_names:
                script_info = self.scripts[jogo][script_nome]
                
                # Frame para o card do script com bordas arredondadas
                card = tk.Frame(scrollable_frame, bg=DARKER_BG, padx=10, pady=10, width=480,
                             highlightbackground=ACCENT_COLOR, highlightthickness=1, bd=0)
                card.pack(fill=tk.X, pady=8, padx=5)
                
                # T√≠tulo do script
                tk.Label(card, text=script_nome, font=self.subheader_font, bg=DARKER_BG, fg=ACCENT_COLOR, anchor='w').pack(fill=tk.X, pady=(0, 5))
                
                # Descri√ß√£o
                if "description" in script_info:
                    desc_label = tk.Label(card, text=script_info["description"], 
                                       font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR,
                                       wraplength=400, justify='left', anchor='w')
                    desc_label.pack(fill=tk.X, pady=5)
                
                # Informa√ß√µes adicionais
                info_frame = tk.Frame(card, bg=DARKER_BG)
                info_frame.pack(fill=tk.X, pady=5)
                
                # Key info
                key_text = "‚úì Key Necess√°ria" if script_info.get('key', False) else "‚úó Sem Key"
                key_color = WARNING_COLOR if script_info.get('key', False) else SUCCESS_COLOR
                tk.Label(info_frame, text=key_text, font=self.normal_font, bg=DARKER_BG, fg=key_color).pack(side=tk.LEFT, padx=(0, 15))
                
                # Bot√µes de a√ß√£o
                button_frame = tk.Frame(card, bg=DARKER_BG)
                button_frame.pack(fill=tk.X, pady=8)
                
                # Bot√£o copiar script com bordas arredondadas
                copy_btn = tk.Button(button_frame, text="Copiar Script", bg=DARKER_BG, fg=TEXT_COLOR,
                                 font=self.normal_font, bd=0, padx=15, pady=6,
                                 highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                                 activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                                 command=lambda code=script_info.get('code', ''), name=script_nome: self.copiar_script(code, name))
                copy_btn.pack(side=tk.LEFT, padx=(0, 10))
                
                # Efeitos hover
                copy_btn.bind("<Enter>", lambda e, b=copy_btn: b.config(fg=ACCENT_COLOR))
                copy_btn.bind("<Leave>", lambda e, b=copy_btn: b.config(fg=TEXT_COLOR))
                
                # Bot√£o Discord com bordas arredondadas
                if script_info.get('discord', ''):
                    discord_btn = tk.Button(button_frame, text="Discord", bg=DARKER_BG, fg=TEXT_COLOR,
                                        font=self.normal_font, bd=0, padx=15, pady=6,
                                        highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                                        activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                                        command=lambda link=script_info.get('discord', ''): self.open_link(link))
                    discord_btn.pack(side=tk.LEFT, padx=(0, 10))
                    discord_btn.bind("<Enter>", lambda e, b=discord_btn: b.config(fg=ACCENT_COLOR))
                    discord_btn.bind("<Leave>", lambda e, b=discord_btn: b.config(fg=TEXT_COLOR))
                
                # Bot√£o key (se necess√°rio) com bordas arredondadas
                if script_info.get('key', False) and script_info.get('key_link', ''):
                    key_btn = tk.Button(button_frame, text="Obter Key", bg=DARKER_BG, fg=WARNING_COLOR,
                                     font=self.normal_font, bd=0, padx=15, pady=6,
                                     highlightthickness=1, highlightbackground=WARNING_COLOR, relief="ridge",
                                     activebackground=BUTTON_HOVER, activeforeground=WARNING_COLOR,
                                     command=lambda link=script_info.get('key_link', ''): self.open_link(link))
                    key_btn.pack(side=tk.LEFT)
                    key_btn.bind("<Enter>", lambda e, b=key_btn: b.config(bg=BUTTON_HOVER))
                    key_btn.bind("<Leave>", lambda e, b=key_btn: b.config(bg=DARKER_BG))
                
                # Bot√£o para exibir mais detalhes
                details_btn = tk.Button(button_frame, text="Detalhes", bg=DARKER_BG, fg=TEXT_COLOR,
                                     font=self.normal_font, bd=0, padx=15, pady=6,
                                     highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                                     activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                                     command=lambda j=jogo, s=script_nome: self.mostrar_info_script(j, s))
                details_btn.pack(side=tk.RIGHT)
                details_btn.bind("<Enter>", lambda e, b=details_btn: b.config(fg=ACCENT_COLOR))
                details_btn.bind("<Leave>", lambda e, b=details_btn: b.config(fg=TEXT_COLOR))
        
        # Bot√£o voltar com bordas arredondadas
        back_btn = tk.Button(self.content_frame, text="Voltar", bg=DARKER_BG, fg=TEXT_COLOR,
                          font=self.normal_font, bd=0, padx=20, pady=8,
                          highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                          activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                          command=self.mostrar_jogos)
        back_btn.pack(pady=15)
        back_btn.bind("<Enter>", lambda e, b=back_btn: b.config(fg=ACCENT_COLOR))
        back_btn.bind("<Leave>", lambda e, b=back_btn: b.config(fg=TEXT_COLOR))
        
    def adicionar_script(self, jogo):
        """Abre uma janela para adicionar um novo script ao jogo"""
        # Criar janela de di√°logo
        dialog = tk.Toplevel(self.root)
        dialog.title(f"Adicionar Script
c¬≤= import tkinter as tk
from tkinter import ttk, font, filedialog, messagebox, scrolledtext
import pyperclip
from PIL import Image, ImageTk
import os
import webbrowser
import threading
import time
import json
from pathlib import Path

# Continua√ß√£o do c√≥digo C da classe OriginHub
# A partir da fun√ß√£o adicionar_script

    def adicionar_script(self, jogo):
        """Abre uma janela para adicionar um novo script ao jogo"""
        # Criar janela de di√°logo
        dialog = tk.Toplevel(self.root)
        dialog.title(f"Adicionar Script para {jogo}")
        dialog.geometry("550x650")
        dialog.configure(bg=DARK_BG)
        dialog.resizable(False, False)
        dialog.transient(self.root)  # Torna modal
        dialog.grab_set()  # Bloqueia a janela principal
        
        # Centralizar a janela
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Container principal com scroll
        main_frame = tk.Frame(dialog, bg=DARK_BG)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Canvas para scroll
        canvas = tk.Canvas(main_frame, bg=DARK_BG, highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=DARK_BG, padx=20, pady=20)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # T√≠tulo
        tk.Label(scrollable_frame, text="Adicionar Script", font=self.subheader_font, bg=DARK_BG, fg=TEXT_COLOR).pack(pady=(0, 15))
        
        # Campo de nome do script
        tk.Label(scrollable_frame, text="Nome do Script:", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        nome_entry = tk.Entry(scrollable_frame, font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR, 
                           insertbackground=TEXT_COLOR, highlightthickness=1, highlightbackground=ACCENT_COLOR, bd=0)
        nome_entry.pack(fill=tk.X, pady=(0, 10))
        nome_entry.focus_set()  # Focar no campo de entrada
        
        # Campo de c√≥digo do script
        tk.Label(scrollable_frame, text="C√≥digo:", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        codigo_text = scrolledtext.ScrolledText(scrollable_frame, font=('Consolas', 10), bg=DARKER_BG, fg=TEXT_COLOR, 
                                            insertbackground=TEXT_COLOR, height=10, 
                                            highlightthickness=1, highlightbackground=ACCENT_COLOR, bd=0)
        codigo_text.pack(fill=tk.X, pady=(0, 10))
        
        # Campo de descri√ß√£o
        tk.Label(scrollable_frame, text="Descri√ß√£o (m√≠n. 6 caracteres):", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        desc_text = scrolledtext.ScrolledText(scrollable_frame, font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR, 
                                          insertbackground=TEXT_COLOR, height=4, 
                                          highlightthickness=1, highlightbackground=ACCENT_COLOR, bd=0)
        desc_text.pack(fill=tk.X, pady=(0, 10))
        
        # Campo para indicar se requer chave
        key_var = tk.StringVar(value="N√£o")  # Valor padr√£o
        tk.Label(scrollable_frame, text="Requer Chave?", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        key_frame = tk.Frame(scrollable_frame, bg=DARK_BG)
        key_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Radio buttons para sim/n√£o
        sim_radio = tk.Radiobutton(key_frame, text="Sim", variable=key_var, value="Sim", 
                                bg=DARK_BG, fg=TEXT_COLOR, selectcolor=DARKER_BG,
                                activebackground=DARK_BG, activeforeground=ACCENT_COLOR)
        sim_radio.pack(side=tk.LEFT, padx=(0, 15))
        
        nao_radio = tk.Radiobutton(key_frame, text="N√£o", variable=key_var, value="N√£o", 
                                bg=DARK_BG, fg=TEXT_COLOR, selectcolor=DARKER_BG,
                                activebackground=DARK_BG, activeforeground=ACCENT_COLOR)
        nao_radio.pack(side=tk.LEFT)
        
        # Campo para link da chave
        key_link_frame = tk.Frame(scrollable_frame, bg=DARK_BG)
        key_link_frame.pack(fill=tk.X, pady=(0, 10))
        
        tk.Label(key_link_frame, text="Link da Chave:", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        key_link_entry = tk.Entry(key_link_frame, font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR, 
                              insertbackground=TEXT_COLOR, highlightthickness=1, highlightbackground=ACCENT_COLOR, bd=0)
        key_link_entry.pack(fill=tk.X, pady=(0, 5))
        
        # Campo para link do Discord (opcional)
        tk.Label(scrollable_frame, text="Link do Discord (opcional):", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        discord_entry = tk.Entry(scrollable_frame, font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR, 
                             insertbackground=TEXT_COLOR, highlightthickness=1, highlightbackground=ACCENT_COLOR, bd=0)
        discord_entry.pack(fill=tk.X, pady=(0, 10))
        
        # Fun√ß√£o para mostrar/ocultar o campo de link da chave com base na sele√ß√£o
        def toggle_key_link(*args):
            if key_var.get() == "Sim":
                key_link_frame.pack(fill=tk.X, pady=(0, 10))
            else:
                key_link_frame.pack_forget()
                
        # Registrar callback para a vari√°vel key_var
        key_var.trace_add("write", toggle_key_link)
        
        # Chamar a fun√ß√£o para configurar o estado inicial
        toggle_key_link()
        
        # Frame para bot√µes de a√ß√£o
        btn_frame = tk.Frame(scrollable_frame, bg=DARK_BG)
        btn_frame.pack(fill=tk.X, pady=(20, 0))
        
        # Fun√ß√£o para salvar o novo script
        def salvar_script():
            nome = nome_entry.get().strip()
            codigo = codigo_text.get("1.0", tk.END).strip()
            descricao = desc_text.get("1.0", tk.END).strip()
            requer_key = (key_var.get() == "Sim")
            key_link = key_link_entry.get().strip()
            discord = discord_entry.get().strip()
            
            # Validar campos obrigat√≥rios
            if not nome:
                messagebox.showerror("Erro", "O nome do script √© obrigat√≥rio.")
                return
                
            if not codigo:
                messagebox.showerror("Erro", "O c√≥digo do script √© obrigat√≥rio.")
                return
                
            if len(descricao) < 6:
                messagebox.showerror("Erro", "A descri√ß√£o deve ter pelo menos 6 caracteres.")
                return
                
            if requer_key and not key_link:
                messagebox.showerror("Erro", "O link da chave √© obrigat√≥rio quando o script requer chave.")
                return
                
            # Verificar se o script j√° existe
            if nome in self.scripts[jogo] and nome != "_info":
                messagebox.showerror("Erro", f"Um script com o nome '{nome}' j√° existe para este jogo.")
                return
                
            # Criar entrada para o novo script
            self.scripts[jogo][nome] = {
                "code": codigo,
                "description": descricao,
                "key": requer_key,
                "key_link": key_link if requer_key else "",
                "discord": discord
            }
            
            # Salvar dados
            if self.save_games_data():
                messagebox.showinfo("Sucesso", f"Script '{nome}' adicionado com sucesso!")
                dialog.destroy()
                # Atualizar a tela de scripts
                self.mostrar_scripts(jogo)
        
        # Bot√£o cancelar
        cancel_btn = tk.Button(btn_frame, text="Cancelar", bg=DARKER_BG, fg=TEXT_COLOR,
                            font=self.normal_font, bd=0, padx=15, pady=8,
                            highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                            activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                            command=dialog.destroy)
        cancel_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Efeito hover
        cancel_btn.bind("<Enter>", lambda e, b=cancel_btn: b.config(fg=ACCENT_COLOR))
        cancel_btn.bind("<Leave>", lambda e, b=cancel_btn: b.config(fg=TEXT_COLOR))
        
        # Bot√£o salvar
        save_btn = tk.Button(btn_frame, text="Salvar", bg=DARKER_BG, fg=SUCCESS_COLOR,
                          font=self.normal_font, bd=0, padx=20, pady=8,
                          highlightthickness=1, highlightbackground=SUCCESS_COLOR, relief="ridge",
                          activebackground=BUTTON_HOVER, activeforeground=SUCCESS_COLOR,
                          command=salvar_script)
        save_btn.pack(side=tk.RIGHT)
        
        # Efeito hover
        save_btn.bind("<Enter>", lambda e, b=save_btn: b.config(bg=BUTTON_HOVER))
        save_btn.bind("<Leave>", lambda e, b=save_btn: b.config(bg=DARKER_BG))

    def mostrar_info_script(self, jogo, script_nome):
        """Exibe uma janela com informa√ß√µes detalhadas sobre o script"""
        # Verificar se o script existe
        if script_nome not in self.scripts[jogo]:
            messagebox.showerror("Erro", f"Script '{script_nome}' n√£o encontrado.")
            return
            
        script_info = self.scripts[jogo][script_nome]
        
        # Criar janela de di√°logo
        dialog = tk.Toplevel(self.root)
        dialog.title(f"Detalhes do Script: {script_nome}")
        dialog.geometry("600x500")
        dialog.configure(bg=DARK_BG)
        dialog.resizable(False, False)
        dialog.transient(self.root)  # Torna modal
        dialog.grab_set()  # Bloqueia a janela principal
        
        # Centralizar a janela
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Container principal com scroll
        main_frame = tk.Frame(dialog, bg=DARK_BG)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Canvas para scroll
        canvas = tk.Canvas(main_frame, bg=DARK_BG, highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=DARK_BG, padx=20, pady=20)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # T√≠tulo
        tk.Label(scrollable_frame, text=script_nome, font=self.header_font, bg=DARK_BG, fg=ACCENT_COLOR).pack(pady=(0, 15))
        
        # Descri√ß√£o
        tk.Label(scrollable_frame, text="Descri√ß√£o:", font=self.subheader_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        desc_frame = tk.Frame(scrollable_frame, bg=DARKER_BG, padx=10, pady=10,
                           highlightbackground=ACCENT_COLOR, highlightthickness=1, bd=0)
        desc_frame.pack(fill=tk.X, pady=(0, 15))
        
        desc_label = tk.Label(desc_frame, text=script_info.get("description", "Sem descri√ß√£o dispon√≠vel."),
                           font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR,
                           wraplength=520, justify=tk.LEFT)
        desc_label.pack(anchor=tk.W)
        
        # Informa√ß√µes
        info_frame = tk.Frame(scrollable_frame, bg=DARKER_BG, padx=10, pady=10,
                           highlightbackground=ACCENT_COLOR, highlightthickness=1, bd=0)
        info_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Key info
        key_text = "‚úì Key Necess√°ria" if script_info.get('key', False) else "‚úó Sem Key"
        key_color = WARNING_COLOR if script_info.get('key', False) else SUCCESS_COLOR
        tk.Label(info_frame, text="Status da Key:", font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR).grid(row=0, column=0, sticky=tk.W, pady=5)
        tk.Label(info_frame, text=key_text, font=self.normal_font, bg=DARKER_BG, fg=key_color).grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Link da Key
        if script_info.get('key', False) and script_info.get('key_link', ''):
            tk.Label(info_frame, text="Link da Key:", font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR).grid(row=1, column=0, sticky=tk.W, pady=5)
            key_link_label = tk.Label(info_frame, text=script_info.get('key_link', ''),
                                   font=self.normal_font, bg=DARKER_BG, fg=ACCENT_COLOR,
                                   cursor="hand2")
            key_link_label.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=5)
            key_link_label.bind("<Button-1>", lambda e, link=script_info.get('key_link', ''): self.open_link(link))
            
        # Discord Link
        if script_info.get('discord', ''):
            tk.Label(info_frame, text="Discord:", font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR).grid(row=2, column=0, sticky=tk.W, pady=5)
            discord_link_label = tk.Label(info_frame, text=script_info.get('discord', ''),
                                       font=self.normal_font, bg=DARKER_BG, fg=ACCENT_COLOR,
                                       cursor="hand2")
            discord_link_label.grid(row=2, column=1, sticky=tk.W, padx=(10, 0), pady=5)
            discord_link_label.bind("<Button-1>", lambda e, link=script_info.get('discord', ''): self.open_link(link))
        
        # C√≥digo do script
        tk.Label(scrollable_frame, text="C√≥digo:", font=self.subheader_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        code_frame = tk.Frame(scrollable_frame, bg=DARKER_BG, padx=0, pady=0,
                           highlightbackground=ACCENT_COLOR, highlightthickness=1, bd=0)
        code_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        code_text = scrolledtext.ScrolledText(code_frame, font=('Consolas', 10), bg=DARKER_BG, fg=TEXT_COLOR,
                                           insertbackground=TEXT_COLOR, height=10,
                                           highlightthickness=0, bd=0)
        code_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        code_text.insert("1.0", script_info.get("code", ""))
        code_text.config(state=tk.DISABLED)  # Tornar o texto apenas leitura
        
        # Bot√µes de a√ß√£o
        btn_frame = tk.Frame(scrollable_frame, bg=DARK_BG)
        btn_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Bot√£o para copiar o c√≥digo
        copy_btn = tk.Button(btn_frame, text="Copiar C√≥digo", bg=DARKER_BG, fg=TEXT_COLOR,
                          font=self.normal_font, bd=0, padx=15, pady=8,
                          highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                          activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                          command=lambda: self.copiar_script(script_info.get('code', ''), script_nome))
        copy_btn.pack(side=tk.LEFT)
        
        # Efeito hover
        copy_btn.bind("<Enter>", lambda e, b=copy_btn: b.config(fg=ACCENT_COLOR))
        copy_btn.bind("<Leave>", lambda e, b=copy_btn: b.config(fg=TEXT_COLOR))
        
        # Bot√£o fechar
        close_btn = tk.Button(btn_frame, text="Fechar", bg=DARKER_BG, fg=TEXT_COLOR,
                           font=self.normal_font, bd=0, padx=15, pady=8,
                           highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                           activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                           command=dialog.destroy)
        close_btn.pack(side=tk.RIGHT)
        
        # Efeito hover
        close_btn.bind("<Enter>", lambda e, b=close_btn: b.config(fg=ACCENT_COLOR))
        close_btn.bind("<Leave>", lambda e, b=close_btn: b.config(fg=TEXT_COLOR))
        
    def copiar_script(self, codigo, nome_script):
        """Copia o c√≥digo do script para a √°rea de transfer√™ncia e exibe feedback"""
        if not codigo:
            messagebox.showwarning("Aviso", "N√£o h√° c√≥digo dispon√≠vel para copiar.")
            return
            
        # Copiar para a √°rea de transfer√™ncia
        pyperclip.copy(codigo)
        
        # Atualizar a barra de status
        self.status_label.config(text=f"Script '{nome_script}' copiado para a √°rea de transfer√™ncia!")
        
        # Restaurar mensagem ap√≥s alguns segundos
        def restaurar_status():
            time.sleep(3)
            self.status_label.config(text="Pronto")
            
        threading.Thread(target=restaurar_status, daemon=True).start()
        
    def open_link(self, link):
        """Abre um link no navegador padr√£o"""
        if not link:
            return
            
        # Tentar abrir o link no navegador
        try:
            webbrowser.open(link)
            self.status_label.config(text=f"Abrindo link no navegador...")
            
            # Restaurar mensagem ap√≥s alguns segundos
            def restaurar_status():
                time.sleep(3)
                self.status_label.config(text="Pronto")
                
            threading.Thread(target=restaurar_status, daemon=True).start()
        except Exception as e:
            messagebox.showerror("Erro", f"N√£o foi poss√≠vel abrir o link: {str(e)}")
    
    def update_datetime(self):
        # Atualizar data e hora
        from datetime import datetime
        now = datetime.now()
        date_str = now.strftime("%d/%m/%Y %H:%M:%S")
        self.datetime_label.config(text=date_str)
        # Atualizar a cada segundo
        self.root.after(1000, self.update_datetime)

if __name__ == "__main__":
    root = tk.Tk()
    app = OriginHub(root)
    root.mainloop()
