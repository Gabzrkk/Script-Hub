import tkinter as tk
from tkinter import ttk, font, filedialog, messagebox
import pyperclip
from PIL import Image, ImageTk
import os
import webbrowser
import threading
import time
import json
from pathlib import Path

# Cores modernas com tema escuro
DARK_BG = "#1e1e2e"
DARKER_BG = "#181825"
ACCENT_COLOR = "#cba6f7"  # Roxo claro para destaque
TEXT_COLOR = "#cdd6f4"
SECONDARY_TEXT = "#a6adc8"
SUCCESS_COLOR = "#a6e3a1"
BUTTON_HOVER = "#313244"
WARNING_COLOR = "#f9e2af"
ERROR_COLOR = "#f38ba8"

# Constantes para os caminhos
USER_HOME = str(Path.home())
APP_DIR = os.path.join(USER_HOME, "script_hub")
WORKSPACE_DIR = os.path.join(APP_DIR, "WorkSpace")
PICTURES_DIR = os.path.join(APP_DIR, "WorkPictures")
DATA_FILE = os.path.join(APP_DIR, "games_data.json")

class OriginHub:
    def __init__(self, root):
        self.root = root
        self.root.title("Origins Hub")
        self.root.geometry("550x650")  # Tamanho maior para acomodar melhor os elementos
        self.root.configure(bg=DARK_BG)
        self.root.resizable(False, False)
        
        # Garantir que a estrutura de diret√≥rios exista
        self.setup_directories()
        
        # Carregar dados dos jogos/scripts
        self.load_games_data()
        
        # Aplicar tema personalizado
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Bot√£o principal
        self.style.configure('TButton', 
                            background=DARK_BG, 
                            foreground=TEXT_COLOR, 
                            borderwidth=0,
                            focuscolor=DARK_BG,
                            lightcolor=DARK_BG,
                            darkcolor=DARK_BG,
                            bordercolor=DARK_BG,
                            font=('Segoe UI', 10))
        
        self.style.map('TButton', 
                      background=[('active', BUTTON_HOVER)],
                      foreground=[('active', ACCENT_COLOR)])
        
        # Configurar fontes
        self.header_font = ('Segoe UI', 16, 'bold')
        self.subheader_font = ('Segoe UI', 12, 'bold')
        self.normal_font = ('Segoe UI', 10)
        
        # Criar interface
        self.create_widgets()
        
    def setup_directories(self):
        """Cria a estrutura de diret√≥rios necess√°ria se n√£o existir"""
        try:
            # Criar diret√≥rios
            os.makedirs(APP_DIR, exist_ok=True)
            os.makedirs(WORKSPACE_DIR, exist_ok=True)
            os.makedirs(PICTURES_DIR, exist_ok=True)
            
            # Verificar se o arquivo de dados existe, se n√£o, criar um vazio
            if not os.path.exists(DATA_FILE):
                with open(DATA_FILE, 'w') as f:
                    json.dump({}, f)
                    
            # Testar se o arquivo √© um JSON v√°lido
            try:
                with open(DATA_FILE, 'r') as f:
                    json.load(f)
            except json.JSONDecodeError:
                # Se o arquivo estiver corrompido, criar um novo
                with open(DATA_FILE, 'w') as f:
                    json.dump({}, f)
                    
            return True
        except Exception as e:
            messagebox.showerror("Erro", f"N√£o foi poss√≠vel criar os diret√≥rios necess√°rios: {str(e)}")
            return False
            
    def load_games_data(self):
        """Carrega os dados dos jogos e scripts do arquivo JSON"""
        try:
            with open(DATA_FILE, 'r') as f:
                data = json.load(f)
                self.scripts = data if data else {}
        except (FileNotFoundError, json.JSONDecodeError):
            # Se o arquivo n√£o existir ou estiver corrompido, iniciar com um dicion√°rio vazio
            self.scripts = {}
            self.save_games_data()  # Criar o arquivo
            
    def save_games_data(self):
        """Salva os dados dos jogos e scripts no arquivo JSON"""
        try:
            with open(DATA_FILE, 'w') as f:
                json.dump(self.scripts, f, indent=4)
            return True
        except Exception as e:
            messagebox.showerror("Erro", f"N√£o foi poss√≠vel salvar os dados: {str(e)}")
            return False
            
    def create_widgets(self):
        # Criar header com logo
        self.header_frame = tk.Frame(self.root, bg=DARKER_BG, height=80)
        self.header_frame.pack(fill=tk.X, pady=0)
        
        # Logo e t√≠tulo
        self.logo_label = tk.Label(self.header_frame, text="üéÆ", font=('Segoe UI', 24), bg=DARKER_BG, fg=ACCENT_COLOR)
        self.logo_label.pack(side=tk.LEFT, padx=15)
        
        self.title_label = tk.Label(self.header_frame, text="Origins Hub", font=self.header_font, bg=DARKER_BG, fg=TEXT_COLOR)
        self.title_label.pack(side=tk.LEFT, padx=5)
        
        # Separador
        separator = ttk.Separator(self.root, orient='horizontal')
        separator.pack(fill=tk.X, pady=0)
        
        # Frame principal
        self.main_frame = tk.Frame(self.root, bg=DARK_BG)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Header frame com t√≠tulo e data/hora
        self.header_content = tk.Frame(self.main_frame, bg=DARK_BG)
        self.header_content.pack(fill=tk.X, pady=10)
        
        # Header din√¢mico (√† esquerda)
        self.header = tk.Label(self.header_content, text="", font=self.subheader_font, bg=DARK_BG, fg=TEXT_COLOR)
        self.header.pack(side=tk.LEFT, anchor='w')
        
        # Data e hora (√† direita)
        self.datetime_label = tk.Label(self.header_content, text="", font=self.normal_font, bg=DARK_BG, fg=SECONDARY_TEXT)
        self.datetime_label.pack(side=tk.RIGHT, anchor='e')
        self.update_datetime()
        
        # Container para conte√∫do
        self.content_frame = tk.Frame(self.main_frame, bg=DARK_BG)
        self.content_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Status bar
        self.status_frame = tk.Frame(self.root, bg=DARKER_BG, height=30)
        self.status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        
        self.status_label = tk.Label(self.status_frame, text="Pronto", bg=DARKER_BG, fg=SECONDARY_TEXT, font=('Segoe UI', 9))
        self.status_label.pack(pady=5)
        
        # Iniciar na tela de jogos
        self.mostrar_jogos()
        
    def limpar_tela(self):
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
    def mostrar_jogos(self):
        self.limpar_tela()
        self.header.config(text="Selecione o jogo")
        
        # Container para cards e bot√£o de adi√ß√£o
        main_container = tk.Frame(self.content_frame, bg=DARK_BG)
        main_container.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Bot√£o para adicionar novo jogo
        add_game_btn = tk.Button(main_container, text="‚ûï Adicionar Novo Jogo", bg=DARKER_BG, fg=TEXT_COLOR,
                              font=self.normal_font, bd=0, padx=15, pady=8,
                              highlightthickness=1, highlightbackground=SUCCESS_COLOR, relief="ridge",
                              activebackground=BUTTON_HOVER, activeforeground=SUCCESS_COLOR,
                              command=self.adicionar_jogo)
        add_game_btn.pack(pady=(0, 15), anchor=tk.W)
        
        # Efeito hover para o bot√£o de adicionar
        add_game_btn.bind("<Enter>", lambda e, b=add_game_btn: b.config(fg=SUCCESS_COLOR))
        add_game_btn.bind("<Leave>", lambda e, b=add_game_btn: b.config(fg=TEXT_COLOR))
        
        # Container para cards
        games_container = tk.Frame(main_container, bg=DARK_BG)
        games_container.pack(fill=tk.BOTH, expand=True)
        
        # Verificar se h√° jogos para exibir
        if not self.scripts:
            # Mensagem quando n√£o h√° jogos
            empty_label = tk.Label(games_container, text="Nenhum jogo adicionado.\nClique em '‚ûï Adicionar Novo Jogo' para come√ßar.",
                                font=self.normal_font, bg=DARK_BG, fg=SECONDARY_TEXT, justify=tk.CENTER)
            empty_label.pack(expand=True, pady=50)
            return
            
        # Criar um card para cada jogo
        row, col = 0, 0
        for i, nome_jogo in enumerate(self.scripts):
            # Frame para o card com bordas arredondadas
            card = tk.Frame(games_container, bg=DARKER_BG, width=230, height=120, padx=5, pady=5,
                          highlightbackground=ACCENT_COLOR, highlightthickness=1, bd=0)
            card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
            card.pack_propagate(False)  # Manter tamanho fixo
            
            # T√≠tulo do card
            tk.Label(card, text=nome_jogo, font=self.subheader_font, bg=DARKER_BG, fg=ACCENT_COLOR).pack(pady=5)
            
            # Contar scripts
            script_count = len(self.scripts[nome_jogo])
            tk.Label(card, text=f"{script_count} scripts dispon√≠veis", font=self.normal_font, bg=DARKER_BG, fg=SECONDARY_TEXT).pack(pady=2)
            
            # Bot√£o de acesso com bordas arredondadas
            btn = tk.Button(card, text="Acessar Scripts", bg=DARKER_BG, fg=TEXT_COLOR,
                          font=self.normal_font, bd=0, highlightthickness=1, highlightbackground=ACCENT_COLOR,
                          activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR, relief="ridge",
                          borderwidth=1, padx=10, pady=5,
                          command=lambda j=nome_jogo: self.mostrar_scripts(j))
            btn.pack(pady=10)
            
            # Efeito hover
            btn.bind("<Enter>", lambda e, b=btn: b.config(fg=ACCENT_COLOR))
            btn.bind("<Leave>", lambda e, b=btn: b.config(fg=TEXT_COLOR))
            
            # Ajustar grid
            col += 1
            if col > 1:  # 2 cards por linha
                col = 0
                row += 1
                
        # Configurar grid para expans√£o
        for i in range(2):
            games_container.grid_columnconfigure(i, weight=1)
            
    def adicionar_jogo(self):
        """Abre uma janela para adicionar um novo jogo"""
        # Criar janela de di√°logo
        dialog = tk.Toplevel(self.root)
        dialog.title("Adicionar Novo Jogo")
        dialog.geometry("400x300")
        dialog.configure(bg=DARK_BG)
        dialog.resizable(False, False)
        dialog.transient(self.root)  # Torna modal
        dialog.grab_set()  # Bloqueia a janela principal
        
        # Centralizar a janela
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Container principal
        main_frame = tk.Frame(dialog, bg=DARK_BG, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        tk.Label(main_frame, text="Adicionar Novo Jogo", font=self.subheader_font, bg=DARK_BG, fg=TEXT_COLOR).pack(pady=(0, 15))
        
        # Campo de nome do jogo
        tk.Label(main_frame, text="Nome do Jogo:", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(10, 5))
        nome_entry = tk.Entry(main_frame, font=self.normal_font, bg=DARKER_BG, fg=TEXT_COLOR, insertbackground=TEXT_COLOR,
                           highlightthickness=1, highlightbackground=ACCENT_COLOR, bd=0)
        nome_entry.pack(fill=tk.X, pady=(0, 10))
        nome_entry.focus_set()  # Focar no campo de entrada
        
        # Vari√°vel para armazenar o caminho da imagem selecionada
        imagem_path = tk.StringVar()
        
        # Frame para selecionar imagem
        img_frame = tk.Frame(main_frame, bg=DARK_BG)
        img_frame.pack(fill=tk.X, pady=10)
        
        tk.Label(img_frame, text="Imagem do Jogo (opcional):", font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(anchor=tk.W, pady=(5, 5))
        
        # Label para exibir o caminho da imagem selecionada
        img_path_label = tk.Label(img_frame, text="Nenhuma imagem selecionada", font=self.normal_font, bg=DARK_BG, fg=SECONDARY_TEXT, wraplength=350)
        img_path_label.pack(fill=tk.X, pady=(0, 5))
        
        # Bot√£o para selecionar imagem
        def selecionar_imagem():
            file_path = filedialog.askopenfilename(
                title="Selecionar imagem",
                initialdir=PICTURES_DIR,
                filetypes=[("Imagens", "*.png *.jpg *.jpeg *.gif *.bmp")]
            )
            if file_path:
                # Verificar se o arquivo est√° no diret√≥rio esperado
                if os.path.dirname(file_path) != PICTURES_DIR:
                    messagebox.showwarning("Aviso", f"Por favor, selecione uma imagem da pasta {PICTURES_DIR}")
                    return
                    
                imagem_path.set(os.path.basename(file_path))  # Guardar apenas o nome do arquivo
                img_path_label.config(text=os.path.basename(file_path))
        
        select_img_btn = tk.Button(img_frame, text="Escolher Imagem", bg=DARKER_BG, fg=TEXT_COLOR,
                                font=self.normal_font, bd=0, padx=10, pady=5,
                                highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                                activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                                command=selecionar_imagem)
        select_img_btn.pack(anchor=tk.W)
        
        # Efeito hover
        select_img_btn.bind("<Enter>", lambda e, b=select_img_btn: b.config(fg=ACCENT_COLOR))
        select_img_btn.bind("<Leave>", lambda e, b=select_img_btn: b.config(fg=TEXT_COLOR))
        
        # Frame para bot√µes de a√ß√£o
        btn_frame = tk.Frame(main_frame, bg=DARK_BG)
        btn_frame.pack(fill=tk.X, pady=(20, 0), side=tk.BOTTOM)
        
        # Fun√ß√£o para salvar o novo jogo
        def salvar_jogo():
            nome = nome_entry.get().strip()
            
            # Validar nome
            if not nome:
                messagebox.showerror("Erro", "O nome do jogo √© obrigat√≥rio.")
                return
                
            # Verificar se o jogo j√° existe
            if nome in self.scripts:
                messagebox.showerror("Erro", f"O jogo '{nome}' j√° existe.")
                return
                
            # Criar entrada para o novo jogo
            self.scripts[nome] = {}
            
            # Adicionar caminho da imagem se selecionada
            if imagem_path.get():
                # Aqui podemos adicionar um campo para a imagem nos dados do jogo
                # Por exemplo, podemos criar um campo especial "_info" para metadados
                if "_info" not in self.scripts[nome]:
                    self.scripts[nome]["_info"] = {}
                self.scripts[nome]["_info"]["image"] = imagem_path.get()
            
            # Salvar dados
            if self.save_games_data():
                messagebox.showinfo("Sucesso", f"Jogo '{nome}' adicionado com sucesso!")
                dialog.destroy()
                # Atualizar a tela de jogos
                self.mostrar_jogos()
        
        # Bot√£o cancelar
        cancel_btn = tk.Button(btn_frame, text="Cancelar", bg=DARKER_BG, fg=TEXT_COLOR,
                            font=self.normal_font, bd=0, padx=15, pady=8,
                            highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                            activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                            command=dialog.destroy)
        cancel_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Efeito hover
        cancel_btn.bind("<Enter>", lambda e, b=cancel_btn: b.config(fg=ACCENT_COLOR))
        cancel_btn.bind("<Leave>", lambda e, b=cancel_btn: b.config(fg=TEXT_COLOR))
        
        # Bot√£o salvar
        save_btn = tk.Button(btn_frame, text="Salvar", bg=DARKER_BG, fg=SUCCESS_COLOR,
                          font=self.normal_font, bd=0, padx=20, pady=8,
                          highlightthickness=1, highlightbackground=SUCCESS_COLOR, relief="ridge",
                          activebackground=BUTTON_HOVER, activeforeground=SUCCESS_COLOR,
                          command=salvar_jogo)
        save_btn.pack(side=tk.RIGHT)
        
        # Efeito hover
        save_btn.bind("<Enter>", lambda e, b=save_btn: b.config(bg=BUTTON_HOVER))
        save_btn.bind("<Leave>", lambda e, b=save_btn: b.config(bg=DARKER_BG))
        
        # Liga√ß√£o para tecla Enter
        dialog.bind("<Return>", lambda event: salvar_jogo())
        
        # Esperando que o di√°logo seja fechado
        dialog.wait_window()

    # Os m√©todos restantes ser√£o implementados nas pr√≥ximas partes
    def mostrar_scripts(self, jogo):
        # Placeholder - ser√° implementado na parte C
        self.limpar_tela()
        self.header.config(text=f"Scripts de {jogo}")
        
        # Mensagem tempor√°ria
        tk.Label(self.content_frame, text="Esta funcionalidade ser√° implementada na pr√≥xima parte!",
               font=self.normal_font, bg=DARK_BG, fg=TEXT_COLOR).pack(pady=50)
        
        # Bot√£o voltar com bordas arredondadas
        back_btn = tk.Button(self.content_frame, text="Voltar", bg=DARKER_BG, fg=TEXT_COLOR,
                          font=self.normal_font, bd=0, padx=20, pady=8,
                          highlightthickness=1, highlightbackground=ACCENT_COLOR, relief="ridge",
                          activebackground=BUTTON_HOVER, activeforeground=ACCENT_COLOR,
                          command=self.mostrar_jogos)
        back_btn.pack(pady=15)
        back_btn.bind("<Enter>", lambda e, b=back_btn: b.config(fg=ACCENT_COLOR))
        back_btn.bind("<Leave>", lambda e, b=back_btn: b.config(fg=TEXT_COLOR))
    
    def update_datetime(self):
        # Atualizar data e hora
        from datetime import datetime
        now = datetime.now()
        date_str = now.strftime("%d/%m/%Y %H:%M:%S")
        self.datetime_label.config(text=date_str)
        # Atualizar a cada segundo
        self.root.after(1000, self.update_datetime)

if __name__ == "__main__":
    root = tk.Tk()
    app = OriginHub(root)
    root.mainloop()
